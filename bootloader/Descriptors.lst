   1               		.file	"Descriptors.c"
   2               	__SP_H__ = 0x3e
   3               	__SP_L__ = 0x3d
   4               	__SREG__ = 0x3f
   5               	__tmp_reg__ = 0
   6               	__zero_reg__ = 1
   7               		.text
   8               	.Ltext0:
   9               		.cfi_sections	.debug_frame
  10               		.section	.text.CALLBACK_USB_GetDescriptor,"ax",@progbits
  11               	.global	CALLBACK_USB_GetDescriptor
  13               	CALLBACK_USB_GetDescriptor:
  14               	.LFB94:
  15               		.file 1 "Descriptors.c"
   1:Descriptors.c **** /*
   2:Descriptors.c ****              LUFA Library
   3:Descriptors.c ****      Copyright (C) Dean Camera, 2011.
   4:Descriptors.c **** 
   5:Descriptors.c ****   dean [at] fourwalledcubicle [dot] com
   6:Descriptors.c ****            www.lufa-lib.org
   7:Descriptors.c **** */
   8:Descriptors.c **** 
   9:Descriptors.c **** /*
  10:Descriptors.c ****   Copyright 2011  Dean Camera (dean [at] fourwalledcubicle [dot] com)
  11:Descriptors.c **** 
  12:Descriptors.c ****   Permission to use, copy, modify, distribute, and sell this
  13:Descriptors.c ****   software and its documentation for any purpose is hereby granted
  14:Descriptors.c ****   without fee, provided that the above copyright notice appear in
  15:Descriptors.c ****   all copies and that both that the copyright notice and this
  16:Descriptors.c ****   permission notice and warranty disclaimer appear in supporting
  17:Descriptors.c ****   documentation, and that the name of the author not be used in
  18:Descriptors.c ****   advertising or publicity pertaining to distribution of the
  19:Descriptors.c ****   software without specific, written prior permission.
  20:Descriptors.c **** 
  21:Descriptors.c ****   The author disclaim all warranties with regard to this
  22:Descriptors.c ****   software, including all implied warranties of merchantability
  23:Descriptors.c ****   and fitness.  In no event shall the author be liable for any
  24:Descriptors.c ****   special, indirect or consequential damages or any damages
  25:Descriptors.c ****   whatsoever resulting from loss of use, data or profits, whether
  26:Descriptors.c ****   in an action of contract, negligence or other tortious action,
  27:Descriptors.c ****   arising out of or in connection with the use or performance of
  28:Descriptors.c ****   this software.
  29:Descriptors.c **** */
  30:Descriptors.c **** 
  31:Descriptors.c **** /** \file
  32:Descriptors.c ****  *
  33:Descriptors.c ****  *  USB Device Descriptors, for library use when in USB device mode. Descriptors are special
  34:Descriptors.c ****  *  computer-readable structures which the host requests upon device enumeration, to determine
  35:Descriptors.c ****  *  the device's capabilities and functions.
  36:Descriptors.c ****  */
  37:Descriptors.c **** 
  38:Descriptors.c **** #include "Descriptors.h"
  39:Descriptors.c **** 
  40:Descriptors.c **** /** Device descriptor structure. This descriptor, located in SRAM memory, describes the overall
  41:Descriptors.c ****  *  device characteristics, including the supported USB version, control endpoint size and the
  42:Descriptors.c ****  *  number of device configurations. The descriptor is read out by the USB host when the enumeratio
  43:Descriptors.c ****  *  process begins.
  44:Descriptors.c ****  */
  45:Descriptors.c **** const USB_Descriptor_Device_t DeviceDescriptor =
  46:Descriptors.c **** {
  47:Descriptors.c **** 	.Header                 = {.Size = sizeof(USB_Descriptor_Device_t), .Type = DTYPE_Device},
  48:Descriptors.c **** 
  49:Descriptors.c **** 	.USBSpecification       = VERSION_BCD(01.10),
  50:Descriptors.c **** 	.Class                  = CDC_CSCP_CDCClass,
  51:Descriptors.c **** 	.SubClass               = CDC_CSCP_NoSpecificSubclass,
  52:Descriptors.c **** 	.Protocol               = CDC_CSCP_NoSpecificProtocol,
  53:Descriptors.c **** 
  54:Descriptors.c **** 	.Endpoint0Size          = FIXED_CONTROL_ENDPOINT_SIZE,
  55:Descriptors.c **** 
  56:Descriptors.c **** 	.VendorID               = DEVICE_VID,
  57:Descriptors.c **** 	.ProductID              = DEVICE_PID,
  58:Descriptors.c **** 	.ReleaseNumber          = VERSION_BCD(00.01),
  59:Descriptors.c **** 
  60:Descriptors.c **** 	.ManufacturerStrIndex   = 0x02,
  61:Descriptors.c **** 	.ProductStrIndex        = 0x01,
  62:Descriptors.c **** 	.SerialNumStrIndex      = NO_DESCRIPTOR,
  63:Descriptors.c **** 
  64:Descriptors.c **** 	.NumberOfConfigurations = FIXED_NUM_CONFIGURATIONS
  65:Descriptors.c **** };
  66:Descriptors.c **** 
  67:Descriptors.c **** /** Configuration descriptor structure. This descriptor, located in SRAM memory, describes the usag
  68:Descriptors.c ****  *  of the device in one of its supported configurations, including information about any device in
  69:Descriptors.c ****  *  and endpoints. The descriptor is read out by the USB host during the enumeration process when s
  70:Descriptors.c ****  *  a configuration so that the host may correctly communicate with the USB device.
  71:Descriptors.c ****  */
  72:Descriptors.c **** const USB_Descriptor_Configuration_t ConfigurationDescriptor =
  73:Descriptors.c **** {
  74:Descriptors.c **** 	.Config =
  75:Descriptors.c **** 		{
  76:Descriptors.c **** 			.Header                 = {.Size = sizeof(USB_Descriptor_Configuration_Header_t), .Type = DTYPE_
  77:Descriptors.c **** 
  78:Descriptors.c **** 			.TotalConfigurationSize = sizeof(USB_Descriptor_Configuration_t),
  79:Descriptors.c **** 			.TotalInterfaces        = 2,
  80:Descriptors.c **** 
  81:Descriptors.c **** 			.ConfigurationNumber    = 1,
  82:Descriptors.c **** 			.ConfigurationStrIndex  = NO_DESCRIPTOR,
  83:Descriptors.c **** 
  84:Descriptors.c **** 			.ConfigAttributes       = USB_CONFIG_ATTR_BUSPOWERED,
  85:Descriptors.c **** 
  86:Descriptors.c **** 			.MaxPowerConsumption    = USB_CONFIG_POWER_MA(100)
  87:Descriptors.c **** 		},
  88:Descriptors.c **** 
  89:Descriptors.c **** 	.CDC_CCI_Interface =
  90:Descriptors.c **** 		{
  91:Descriptors.c **** 			.Header                 = {.Size = sizeof(USB_Descriptor_Interface_t), .Type = DTYPE_Interface},
  92:Descriptors.c **** 
  93:Descriptors.c **** 			.InterfaceNumber        = 0,
  94:Descriptors.c **** 			.AlternateSetting       = 0,
  95:Descriptors.c **** 
  96:Descriptors.c **** 			.TotalEndpoints         = 1,
  97:Descriptors.c **** 
  98:Descriptors.c **** 			.Class                  = CDC_CSCP_CDCClass,
  99:Descriptors.c **** 			.SubClass               = CDC_CSCP_ACMSubclass,
 100:Descriptors.c **** 			.Protocol               = CDC_CSCP_ATCommandProtocol,
 101:Descriptors.c **** 
 102:Descriptors.c **** 			.InterfaceStrIndex      = NO_DESCRIPTOR
 103:Descriptors.c **** 		},
 104:Descriptors.c **** 
 105:Descriptors.c **** 	.CDC_Functional_Header =
 106:Descriptors.c **** 		{
 107:Descriptors.c **** 			.Header                 = {.Size = sizeof(USB_CDC_Descriptor_FunctionalHeader_t), .Type = DTYPE_
 108:Descriptors.c **** 			.Subtype                = 0x00,
 109:Descriptors.c **** 
 110:Descriptors.c **** 			.CDCSpecification       = VERSION_BCD(01.10),
 111:Descriptors.c **** 		},
 112:Descriptors.c **** 
 113:Descriptors.c **** 	.CDC_Functional_ACM =
 114:Descriptors.c **** 		{
 115:Descriptors.c **** 			.Header                 = {.Size = sizeof(USB_CDC_Descriptor_FunctionalACM_t), .Type = DTYPE_CSI
 116:Descriptors.c **** 			.Subtype                = 0x02,
 117:Descriptors.c **** 
 118:Descriptors.c **** 			.Capabilities           = 0x04,
 119:Descriptors.c **** 		},
 120:Descriptors.c **** 
 121:Descriptors.c **** 	.CDC_Functional_Union =
 122:Descriptors.c **** 		{
 123:Descriptors.c **** 			.Header                 = {.Size = sizeof(USB_CDC_Descriptor_FunctionalUnion_t), .Type = DTYPE_C
 124:Descriptors.c **** 			.Subtype                = 0x06,
 125:Descriptors.c **** 
 126:Descriptors.c **** 			.MasterInterfaceNumber  = 0,
 127:Descriptors.c **** 			.SlaveInterfaceNumber   = 1,
 128:Descriptors.c **** 		},
 129:Descriptors.c **** 
 130:Descriptors.c **** 	.CDC_NotificationEndpoint =
 131:Descriptors.c **** 		{
 132:Descriptors.c **** 			.Header                 = {.Size = sizeof(USB_Descriptor_Endpoint_t), .Type = DTYPE_Endpoint},
 133:Descriptors.c **** 
 134:Descriptors.c **** 			.EndpointAddress        = (ENDPOINT_DIR_IN | CDC_NOTIFICATION_EPNUM),
 135:Descriptors.c **** 			.Attributes             = (EP_TYPE_INTERRUPT | ENDPOINT_ATTR_NO_SYNC | ENDPOINT_USAGE_DATA),
 136:Descriptors.c **** 			.EndpointSize           = CDC_NOTIFICATION_EPSIZE,
 137:Descriptors.c **** 			.PollingIntervalMS      = 0xFF
 138:Descriptors.c **** 		},
 139:Descriptors.c **** 
 140:Descriptors.c **** 	.CDC_DCI_Interface =
 141:Descriptors.c **** 		{
 142:Descriptors.c **** 			.Header                 = {.Size = sizeof(USB_Descriptor_Interface_t), .Type = DTYPE_Interface},
 143:Descriptors.c **** 
 144:Descriptors.c **** 			.InterfaceNumber        = 1,
 145:Descriptors.c **** 			.AlternateSetting       = 0,
 146:Descriptors.c **** 
 147:Descriptors.c **** 			.TotalEndpoints         = 2,
 148:Descriptors.c **** 
 149:Descriptors.c **** 			.Class                  = CDC_CSCP_CDCDataClass,
 150:Descriptors.c **** 			.SubClass               = CDC_CSCP_NoDataSubclass,
 151:Descriptors.c **** 			.Protocol               = CDC_CSCP_NoDataProtocol,
 152:Descriptors.c **** 
 153:Descriptors.c **** 			.InterfaceStrIndex      = NO_DESCRIPTOR
 154:Descriptors.c **** 		},
 155:Descriptors.c **** 
 156:Descriptors.c **** 	.CDC_DataOutEndpoint =
 157:Descriptors.c **** 		{
 158:Descriptors.c **** 			.Header                 = {.Size = sizeof(USB_Descriptor_Endpoint_t), .Type = DTYPE_Endpoint},
 159:Descriptors.c **** 
 160:Descriptors.c **** 			.EndpointAddress        = (ENDPOINT_DIR_OUT | CDC_RX_EPNUM),
 161:Descriptors.c **** 			.Attributes             = (EP_TYPE_BULK | ENDPOINT_ATTR_NO_SYNC | ENDPOINT_USAGE_DATA),
 162:Descriptors.c **** 			.EndpointSize           = CDC_TXRX_EPSIZE,
 163:Descriptors.c **** 			.PollingIntervalMS      = 0x01
 164:Descriptors.c **** 		},
 165:Descriptors.c **** 
 166:Descriptors.c **** 	.CDC_DataInEndpoint =
 167:Descriptors.c **** 		{
 168:Descriptors.c **** 			.Header                 = {.Size = sizeof(USB_Descriptor_Endpoint_t), .Type = DTYPE_Endpoint},
 169:Descriptors.c **** 
 170:Descriptors.c **** 			.EndpointAddress        = (ENDPOINT_DIR_IN | CDC_TX_EPNUM),
 171:Descriptors.c **** 			.Attributes             = (EP_TYPE_BULK | ENDPOINT_ATTR_NO_SYNC | ENDPOINT_USAGE_DATA),
 172:Descriptors.c **** 			.EndpointSize           = CDC_TXRX_EPSIZE,
 173:Descriptors.c **** 			.PollingIntervalMS      = 0x01
 174:Descriptors.c **** 		}
 175:Descriptors.c **** };
 176:Descriptors.c **** 
 177:Descriptors.c **** /** Language descriptor structure. This descriptor, located in SRAM memory, is returned when the ho
 178:Descriptors.c ****  *  the string descriptor with index 0 (the first index). It is actually an array of 16-bit integer
 179:Descriptors.c ****  *  via the language ID table available at USB.org what languages the device supports for its strin
 180:Descriptors.c ****  */
 181:Descriptors.c **** const USB_Descriptor_String_t LanguageString =
 182:Descriptors.c **** {
 183:Descriptors.c **** 	.Header                 = {.Size = USB_STRING_LEN(1), .Type = DTYPE_String},
 184:Descriptors.c **** 
 185:Descriptors.c **** 	.UnicodeString          = {LANGUAGE_ID_ENG}
 186:Descriptors.c **** };
 187:Descriptors.c **** 
 188:Descriptors.c **** /** Product descriptor string. This is a Unicode string containing the product's details in human r
 189:Descriptors.c ****  *  and is read out upon request by the host when the appropriate string ID is requested, listed in
 190:Descriptors.c ****  *  Descriptor.
 191:Descriptors.c ****  */
 192:Descriptors.c **** const USB_Descriptor_String_t ProductString =
 193:Descriptors.c **** {
 194:Descriptors.c **** 	.Header                 = {.Size = USB_STRING_LEN(16), .Type = DTYPE_String},
 195:Descriptors.c **** 
 196:Descriptors.c **** 	#if DEVICE_PID == 0x0036
 197:Descriptors.c **** 	.UnicodeString          = L"Arduino Leonardo" 
 198:Descriptors.c **** 	#elif DEVICE_PID == 0x0037
 199:Descriptors.c **** 	.UnicodeString			= L"Arduino Micro   "
 200:Descriptors.c **** 	#elif DEVICE_PID == 0x003C
 201:Descriptors.c **** 	.UnicodeString			= L"Arduino Esplora "
 202:Descriptors.c **** 	#else
 203:Descriptors.c **** 	.UnicodeString			= L"USB IO board    "
 204:Descriptors.c **** 	#endif
 205:Descriptors.c **** };
 206:Descriptors.c **** 
 207:Descriptors.c **** const USB_Descriptor_String_t ManufNameString = 
 208:Descriptors.c **** {
 209:Descriptors.c **** 	.Header					= {.Size = USB_STRING_LEN(11), .Type = DTYPE_String},
 210:Descriptors.c **** 	
 211:Descriptors.c **** 	#if DEVICE_VID == 0x2341
 212:Descriptors.c **** 	.UnicodeString			= L"Arduino LLC"
 213:Descriptors.c **** 	#else
 214:Descriptors.c **** 	.UnicodeString			= L"Unknown    "
 215:Descriptors.c **** 	#endif
 216:Descriptors.c **** };
 217:Descriptors.c **** 
 218:Descriptors.c **** /** This function is called by the library when in device mode, and must be overridden (see LUFA li
 219:Descriptors.c ****  *  documentation) by the application code so that the address and size of a requested descriptor c
 220:Descriptors.c ****  *  to the USB library. When the device receives a Get Descriptor request on the control endpoint, 
 221:Descriptors.c ****  *  is called so that the descriptor details can be passed back and the appropriate descriptor sent
 222:Descriptors.c ****  *  USB host.
 223:Descriptors.c ****  */
 224:Descriptors.c **** uint16_t CALLBACK_USB_GetDescriptor(const uint16_t wValue,
 225:Descriptors.c ****                                     const uint8_t wIndex,
 226:Descriptors.c ****                                     const void** const DescriptorAddress)
 227:Descriptors.c **** {
  16               		.loc 1 227 0
  17               		.cfi_startproc
  18               	.LVL0:
  19               	/* prologue: function */
  20               	/* frame size = 0 */
  21               	/* stack size = 0 */
  22               	.L__stack_usage = 0
 228:Descriptors.c **** 	const uint8_t  DescriptorType   = (wValue >> 8);
  23               		.loc 1 228 0
  24 0000 292F      		mov r18,r25
  25 0002 30E0      		ldi r19,0
 229:Descriptors.c **** 	const uint8_t  DescriptorNumber = (wValue & 0xFF);
 230:Descriptors.c **** 
 231:Descriptors.c **** 	const void* Address = NULL;
 232:Descriptors.c **** 	uint16_t    Size    = NO_DESCRIPTOR;
 233:Descriptors.c **** 
 234:Descriptors.c **** 	switch (DescriptorType)
 235:Descriptors.c **** 	{
 236:Descriptors.c **** 		case DTYPE_Device:
 237:Descriptors.c **** 			Address = &DeviceDescriptor;
 238:Descriptors.c **** 			Size    = sizeof(USB_Descriptor_Device_t);
 239:Descriptors.c **** 			break;
 240:Descriptors.c **** 		case DTYPE_Configuration:
 241:Descriptors.c **** 			Address = &ConfigurationDescriptor;
 242:Descriptors.c **** 			Size    = sizeof(USB_Descriptor_Configuration_t);
 243:Descriptors.c **** 			break;
 244:Descriptors.c **** 		case DTYPE_String:
 245:Descriptors.c **** 			if (!(DescriptorNumber))
 246:Descriptors.c **** 			{
 247:Descriptors.c **** 				Address = &LanguageString;
 248:Descriptors.c **** 				Size    = LanguageString.Header.Size;
 249:Descriptors.c **** 			}
 250:Descriptors.c **** 			else if (DescriptorNumber == DeviceDescriptor.ProductStrIndex) 
 251:Descriptors.c **** 			{
 252:Descriptors.c **** 				Address = &ProductString;
 253:Descriptors.c **** 				Size    = ProductString.Header.Size;
 254:Descriptors.c **** 			} else if (DescriptorNumber == DeviceDescriptor.ManufacturerStrIndex)
 255:Descriptors.c **** 			{
 256:Descriptors.c **** 				Address = &ManufNameString;
 257:Descriptors.c **** 				Size	= ManufNameString.Header.Size;
 258:Descriptors.c **** 			}
 259:Descriptors.c **** 
 260:Descriptors.c **** 			break;
 261:Descriptors.c **** 	}
 262:Descriptors.c **** 
 263:Descriptors.c **** 	*DescriptorAddress = Address;
 264:Descriptors.c **** 	return Size;
 265:Descriptors.c **** }
  26               		.loc 1 265 0
  27 0004 3327      		clr r19
 234:Descriptors.c **** 	switch (DescriptorType)
  28               		.loc 1 234 0
  29 0006 2230      		cpi r18,2
  30 0008 3105      		cpc r19,__zero_reg__
  31 000a 01F0      		breq .L4
  32 000c 2330      		cpi r18,3
  33 000e 3105      		cpc r19,__zero_reg__
  34 0010 01F0      		breq .L5
  35 0012 2130      		cpi r18,1
  36 0014 3105      		cpc r19,__zero_reg__
  37 0016 01F0      		breq .L6
  38 0018 00C0      		rjmp .L10
  39               	.L4:
  40               	.LVL1:
 242:Descriptors.c **** 			Size    = sizeof(USB_Descriptor_Configuration_t);
  41               		.loc 1 242 0
  42 001a 2EE3      		ldi r18,lo8(62)
  43 001c 30E0      		ldi r19,0
 241:Descriptors.c **** 			Address = &ConfigurationDescriptor;
  44               		.loc 1 241 0
  45 001e 80E0      		ldi r24,lo8(ConfigurationDescriptor)
  46 0020 90E0      		ldi r25,hi8(ConfigurationDescriptor)
  47               	.LVL2:
 243:Descriptors.c **** 			break;
  48               		.loc 1 243 0
  49 0022 00C0      		rjmp .L3
  50               	.LVL3:
  51               	.L5:
 245:Descriptors.c **** 			if (!(DescriptorNumber))
  52               		.loc 1 245 0
  53 0024 8823      		tst r24
  54 0026 01F0      		breq .L7
 250:Descriptors.c **** 			else if (DescriptorNumber == DeviceDescriptor.ProductStrIndex) 
  55               		.loc 1 250 0
  56 0028 8130      		cpi r24,lo8(1)
  57 002a 01F0      		breq .L8
 254:Descriptors.c **** 			} else if (DescriptorNumber == DeviceDescriptor.ManufacturerStrIndex)
  58               		.loc 1 254 0
  59 002c 8230      		cpi r24,lo8(2)
  60 002e 01F0      		breq .L9
  61               	.L10:
 232:Descriptors.c **** 	uint16_t    Size    = NO_DESCRIPTOR;
  62               		.loc 1 232 0
  63 0030 20E0      		ldi r18,0
  64 0032 30E0      		ldi r19,0
 231:Descriptors.c **** 	const void* Address = NULL;
  65               		.loc 1 231 0
  66 0034 80E0      		ldi r24,0
  67 0036 90E0      		ldi r25,0
  68               	.LVL4:
  69 0038 00C0      		rjmp .L3
  70               	.LVL5:
  71               	.L6:
 238:Descriptors.c **** 			Size    = sizeof(USB_Descriptor_Device_t);
  72               		.loc 1 238 0
  73 003a 22E1      		ldi r18,lo8(18)
  74 003c 30E0      		ldi r19,0
 237:Descriptors.c **** 			Address = &DeviceDescriptor;
  75               		.loc 1 237 0
  76 003e 80E0      		ldi r24,lo8(DeviceDescriptor)
  77 0040 90E0      		ldi r25,hi8(DeviceDescriptor)
  78               	.LVL6:
  79 0042 00C0      		rjmp .L3
  80               	.LVL7:
  81               	.L7:
 248:Descriptors.c **** 				Size    = LanguageString.Header.Size;
  82               		.loc 1 248 0
  83 0044 24E0      		ldi r18,lo8(4)
  84 0046 30E0      		ldi r19,0
 247:Descriptors.c **** 				Address = &LanguageString;
  85               		.loc 1 247 0
  86 0048 80E0      		ldi r24,lo8(LanguageString)
  87 004a 90E0      		ldi r25,hi8(LanguageString)
  88               	.LVL8:
  89 004c 00C0      		rjmp .L3
  90               	.LVL9:
  91               	.L8:
 253:Descriptors.c **** 				Size    = ProductString.Header.Size;
  92               		.loc 1 253 0
  93 004e 22E2      		ldi r18,lo8(34)
  94 0050 30E0      		ldi r19,0
 252:Descriptors.c **** 				Address = &ProductString;
  95               		.loc 1 252 0
  96 0052 80E0      		ldi r24,lo8(ProductString)
  97 0054 90E0      		ldi r25,hi8(ProductString)
  98               	.LVL10:
  99 0056 00C0      		rjmp .L3
 100               	.LVL11:
 101               	.L9:
 257:Descriptors.c **** 				Size	= ManufNameString.Header.Size;
 102               		.loc 1 257 0
 103 0058 28E1      		ldi r18,lo8(24)
 104 005a 30E0      		ldi r19,0
 256:Descriptors.c **** 				Address = &ManufNameString;
 105               		.loc 1 256 0
 106 005c 80E0      		ldi r24,lo8(ManufNameString)
 107 005e 90E0      		ldi r25,hi8(ManufNameString)
 108               	.LVL12:
 109               	.L3:
 263:Descriptors.c **** 	*DescriptorAddress = Address;
 110               		.loc 1 263 0
 111 0060 FA01      		movw r30,r20
 112 0062 9183      		std Z+1,r25
 113 0064 8083      		st Z,r24
 114               		.loc 1 265 0
 115 0066 C901      		movw r24,r18
 116               	.LVL13:
 117 0068 0895      		ret
 118               		.cfi_endproc
 119               	.LFE94:
 121               	.global	ManufNameString
 122               		.section	.rodata
 125               	ManufNameString:
 126 0000 18        		.byte	24
 127 0001 03        		.byte	3
 128 0002 4100      		.string	"A"
 129 0004 7200      		.string	"r"
 130 0006 6400      		.string	"d"
 131 0008 7500      		.string	"u"
 132 000a 6900      		.string	"i"
 133 000c 6E00      		.string	"n"
 134 000e 6F00      		.string	"o"
 135 0010 2000      		.string	" "
 136 0012 4C00      		.string	"L"
 137 0014 4C00      		.string	"L"
 138 0016 4300      		.string	"C"
 139 0018 00        		.string	""
 140 0019 00        		.string	""
 141               	.global	ProductString
 144               	ProductString:
 145 001a 22        		.byte	34
 146 001b 03        		.byte	3
 147 001c 4100      		.string	"A"
 148 001e 7200      		.string	"r"
 149 0020 6400      		.string	"d"
 150 0022 7500      		.string	"u"
 151 0024 6900      		.string	"i"
 152 0026 6E00      		.string	"n"
 153 0028 6F00      		.string	"o"
 154 002a 2000      		.string	" "
 155 002c 4C00      		.string	"L"
 156 002e 6500      		.string	"e"
 157 0030 6F00      		.string	"o"
 158 0032 6E00      		.string	"n"
 159 0034 6100      		.string	"a"
 160 0036 7200      		.string	"r"
 161 0038 6400      		.string	"d"
 162 003a 6F00      		.string	"o"
 163 003c 00        		.string	""
 164 003d 00        		.string	""
 165               	.global	LanguageString
 168               	LanguageString:
 169 003e 04        		.byte	4
 170 003f 03        		.byte	3
 171 0040 0904      		.word	1033
 172               	.global	ConfigurationDescriptor
 175               	ConfigurationDescriptor:
 176 0042 09        		.byte	9
 177 0043 02        		.byte	2
 178 0044 3E00      		.word	62
 179 0046 02        		.byte	2
 180 0047 01        		.byte	1
 181 0048 00        		.byte	0
 182 0049 80        		.byte	-128
 183 004a 32        		.byte	50
 184 004b 09        		.byte	9
 185 004c 04        		.byte	4
 186 004d 00        		.byte	0
 187 004e 00        		.byte	0
 188 004f 01        		.byte	1
 189 0050 02        		.byte	2
 190 0051 02        		.byte	2
 191 0052 01        		.byte	1
 192 0053 00        		.byte	0
 193 0054 05        		.byte	5
 194 0055 24        		.byte	36
 195 0056 00        		.byte	0
 196 0057 1001      		.word	272
 197 0059 04        		.byte	4
 198 005a 24        		.byte	36
 199 005b 02        		.byte	2
 200 005c 04        		.byte	4
 201 005d 05        		.byte	5
 202 005e 24        		.byte	36
 203 005f 06        		.byte	6
 204 0060 00        		.byte	0
 205 0061 01        		.byte	1
 206 0062 07        		.byte	7
 207 0063 05        		.byte	5
 208 0064 82        		.byte	-126
 209 0065 03        		.byte	3
 210 0066 0800      		.word	8
 211 0068 FF        		.byte	-1
 212 0069 09        		.byte	9
 213 006a 04        		.byte	4
 214 006b 01        		.byte	1
 215 006c 00        		.byte	0
 216 006d 02        		.byte	2
 217 006e 0A        		.byte	10
 218 006f 00        		.byte	0
 219 0070 00        		.byte	0
 220 0071 00        		.byte	0
 221 0072 07        		.byte	7
 222 0073 05        		.byte	5
 223 0074 04        		.byte	4
 224 0075 02        		.byte	2
 225 0076 1000      		.word	16
 226 0078 01        		.byte	1
 227 0079 07        		.byte	7
 228 007a 05        		.byte	5
 229 007b 83        		.byte	-125
 230 007c 02        		.byte	2
 231 007d 1000      		.word	16
 232 007f 01        		.byte	1
 233               	.global	DeviceDescriptor
 236               	DeviceDescriptor:
 237 0080 12        		.byte	18
 238 0081 01        		.byte	1
 239 0082 1001      		.word	272
 240 0084 02        		.byte	2
 241 0085 00        		.byte	0
 242 0086 00        		.byte	0
 243 0087 08        		.byte	8
 244 0088 4123      		.word	9025
 245 008a 3600      		.word	54
 246 008c 0100      		.word	1
 247 008e 02        		.byte	2
 248 008f 01        		.byte	1
 249 0090 00        		.byte	0
 250 0091 01        		.byte	1
 251               		.text
 252               	.Letext0:
 253               		.file 2 "c:\\program files (x86)\\atmel\\avr tools\\avr toolchain\\bin\\../lib/gcc/avr/4.7.2/../..
 254               		.file 3 "c:\\program files (x86)\\atmel\\avr tools\\avr toolchain\\bin\\../lib/gcc/avr/4.7.2/inclu
 255               		.file 4 "./LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../StdDescriptors.h"
 256               		.file 5 "./LUFA-111009/LUFA/Drivers/USB/Class/Device/../Common/CDC.h"
 257               		.file 6 "Descriptors.h"
DEFINED SYMBOLS
                            *ABS*:00000000 Descriptors.c
C:\Users\limpkin\AppData\Local\Temp\ccuv4bcv.s:2      *ABS*:0000003e __SP_H__
C:\Users\limpkin\AppData\Local\Temp\ccuv4bcv.s:3      *ABS*:0000003d __SP_L__
C:\Users\limpkin\AppData\Local\Temp\ccuv4bcv.s:4      *ABS*:0000003f __SREG__
C:\Users\limpkin\AppData\Local\Temp\ccuv4bcv.s:5      *ABS*:00000000 __tmp_reg__
C:\Users\limpkin\AppData\Local\Temp\ccuv4bcv.s:6      *ABS*:00000001 __zero_reg__
C:\Users\limpkin\AppData\Local\Temp\ccuv4bcv.s:13     .text.CALLBACK_USB_GetDescriptor:00000000 CALLBACK_USB_GetDescriptor
C:\Users\limpkin\AppData\Local\Temp\ccuv4bcv.s:175    .rodata:00000042 ConfigurationDescriptor
C:\Users\limpkin\AppData\Local\Temp\ccuv4bcv.s:236    .rodata:00000080 DeviceDescriptor
C:\Users\limpkin\AppData\Local\Temp\ccuv4bcv.s:168    .rodata:0000003e LanguageString
C:\Users\limpkin\AppData\Local\Temp\ccuv4bcv.s:144    .rodata:0000001a ProductString
C:\Users\limpkin\AppData\Local\Temp\ccuv4bcv.s:125    .rodata:00000000 ManufNameString

UNDEFINED SYMBOLS
__do_copy_data
